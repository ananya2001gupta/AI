{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"fourqueenproblem","provenance":[],"authorship_tag":"ABX9TyMcvy9cIT33ifmnFxPT9oHz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aNZS3tk38Jv7","executionInfo":{"status":"ok","timestamp":1642790827707,"user_tz":480,"elapsed":20,"user":{"displayName":"Ananya Gupta (RA1911003030265)","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13905991684778876063"}},"outputId":"994ca87b-c340-4387-ae76-4bb9e691a77b"},"outputs":[{"output_type":"stream","name":"stdout","text":["0 0 1 0 \n","1 0 0 0 \n","0 0 0 1 \n","0 1 0 0 \n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":1}],"source":["global N\n","N = 4\n"," \n","def printSolution(board):\n","    for i in range(N):\n","        for j in range(N):\n","            print (board[i][j], end = \" \")\n","        print()\n"," \n","def isSafe(board, row, col):\n"," \n","    for i in range(col):   # Check this row on left side\n","        if board[row][i] == 1:\n","            return False\n","\n","    for i, j in zip(range(row, -1, -1),        # Check upper diagonal on left side\n","                    range(col, -1, -1)):\n","        if board[i][j] == 1:\n","            return False\n","\n","    for i, j in zip(range(row, N, 1),       # Check lower diagonal on left side\n","                    range(col, -1, -1)):\n","        if board[i][j] == 1:\n","            return False\n"," \n","    return True\n"," \n","def solveNQUtil(board, col):\n","\n","    if col >= N:\n","        return True\n"," \n","    for i in range(N):\n"," \n","        if isSafe(board, i, col):\n","             \n","            # Place this queen in board[i][col]\n","            board[i][col] = 1\n"," \n","            # recur to place rest of the queens\n","            if solveNQUtil(board, col + 1) == True:\n","                return True\n","\n","            board[i][col] = 0\n","\n","    return False\n","\n","def solveNQ():\n","    board = [ [0, 0, 0, 0],\n","              [0, 0, 0, 0],\n","              [0, 0, 0, 0],\n","              [0, 0, 0, 0] ]\n"," \n","    if solveNQUtil(board, 0) == False:\n","        print (\"Solution does not exist\")\n","        return False\n"," \n","    printSolution(board)\n","    return True\n","\n","solveNQ()\n"," "]}]}